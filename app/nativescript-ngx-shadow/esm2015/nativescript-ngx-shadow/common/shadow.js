/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Color } from 'tns-core-modules/color';
import { ShapeEnum } from './shape.enum';
import { Length } from 'tns-core-modules/ui/page/page';
import { isAndroid, screen } from "tns-core-modules/platform";
/** @type {?} */
let LayeredShadow;
/** @type {?} */
let PlainShadow;
if (isAndroid) {
    LayeredShadow = android.graphics.drawable.LayerDrawable.extend({});
    PlainShadow = android.graphics.drawable.GradientDrawable.extend({});
}
/** @type {?} */
const classCache = {};
/**
 * @param {?} rtype
 * @param {?} field
 * @return {?}
 */
function getAndroidR(rtype, field) {
    /** @type {?} */
    const className = "android.R$" + rtype;
    if (!classCache.hasOwnProperty(className)) {
        classCache[className] = {
            class: java.lang.Class.forName(className),
            fieldCache: {}
        };
    }
    if (!classCache[className].fieldCache.hasOwnProperty(field)) {
        classCache[className].fieldCache[field] = +classCache[className].class.getField(field).get(null);
    }
    return classCache[className].fieldCache[field];
}
export class Shadow {
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    static apply(tnsView, data) {
        /** @type {?} */
        const LOLLIPOP = 21;
        if (tnsView.android &&
            android.os.Build.VERSION.SDK_INT >= LOLLIPOP) {
            Shadow.applyOnAndroid(tnsView, Shadow.getDefaults(data));
        }
        else if (tnsView.ios) {
            Shadow.applyOnIOS(tnsView, Shadow.getDefaults(data));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static getDefaults(data) {
        return Object.assign({}, data, {
            shape: (/** @type {?} */ (data)).shape || Shadow.DEFAULT_SHAPE,
            pressedElevation: (/** @type {?} */ (data)).pressedElevation || Shadow.DEFAULT_PRESSED_ELEVATION,
            pressedTranslationZ: (/** @type {?} */ (data)).pressedTranslationZ || Shadow.DEFAULT_PRESSED_ELEVATION,
            shadowColor: (/** @type {?} */ (data)).shadowColor ||
                Shadow.DEFAULT_SHADOW_COLOR,
            useShadowPath: ((/** @type {?} */ (data)).useShadowPath !== undefined ? (/** @type {?} */ (data)).useShadowPath : true),
            rasterize: ((/** @type {?} */ (data)).rasterize !== undefined ? (/** @type {?} */ (data)).rasterize : false)
        });
    }
    /**
     * @param {?} drawable
     * @return {?}
     */
    static isShadow(drawable) {
        return (drawable instanceof LayeredShadow || drawable instanceof PlainShadow);
    }
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    static applyOnAndroid(tnsView, data) {
        /** @type {?} */
        const nativeView = tnsView.android;
        /** @type {?} */
        let shape;
        /** @type {?} */
        let overrideBackground = true;
        /** @type {?} */
        let currentBg = nativeView.getBackground();
        if (currentBg instanceof android.graphics.drawable.RippleDrawable) {
            /** @type {?} */
            let rippleBg = currentBg.getDrawable(0);
            if (rippleBg instanceof android.graphics.drawable.InsetDrawable) {
                overrideBackground = false; // this is a button with it's own shadow
            }
            else if (Shadow.isShadow(rippleBg)) {
                // if the ripple is wrapping a shadow, strip it
                currentBg = rippleBg;
            }
        }
        if (overrideBackground) {
            if (Shadow.isShadow(currentBg)) {
                // make sure to have the right background
                currentBg = currentBg instanceof LayeredShadow ? // if layered, get the original background
                    currentBg.getDrawable(1) : null;
            }
            /** @type {?} */
            const outerRadii = Array.create("float", 8);
            if (data.cornerRadius === undefined) {
                outerRadii[0] = outerRadii[1] = Length.toDevicePixels(tnsView.borderTopLeftRadius, 0);
                outerRadii[2] = outerRadii[3] = Length.toDevicePixels(tnsView.borderTopRightRadius, 0);
                outerRadii[4] = outerRadii[5] = Length.toDevicePixels(tnsView.borderBottomRightRadius, 0);
                outerRadii[6] = outerRadii[7] = Length.toDevicePixels(tnsView.borderBottomLeftRadius, 0);
            }
            else {
                java.util.Arrays.fill(outerRadii, Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.cornerRadius)));
            }
            /** @type {?} */
            const bgColor = currentBg ?
                (currentBg instanceof android.graphics.drawable.ColorDrawable && currentBg.getColor() ?
                    currentBg.getColor() : android.graphics.Color.parseColor(data.bgcolor || Shadow.DEFAULT_BGCOLOR)) :
                android.graphics.Color.parseColor(data.bgcolor || Shadow.DEFAULT_BGCOLOR);
            /** @type {?} */
            let newBg;
            if (data.shape !== ShapeEnum.RECTANGLE || data.bgcolor || !currentBg) {
                // replace background
                shape = new PlainShadow();
                shape.setShape(android.graphics.drawable.GradientDrawable[data.shape]);
                shape.setCornerRadii(outerRadii);
                shape.setColor(bgColor);
                newBg = shape;
            }
            else {
                /** @type {?} */
                const r = new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);
                shape = new android.graphics.drawable.ShapeDrawable(r);
                shape.getPaint().setColor(bgColor);
                /** @type {?} */
                var arr = Array.create(android.graphics.drawable.Drawable, 2);
                arr[0] = shape;
                arr[1] = currentBg;
                /** @type {?} */
                const drawable = new LayeredShadow(arr);
                newBg = drawable;
            }
            nativeView.setBackgroundDrawable(newBg);
        }
        nativeView.setElevation(Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.elevation)));
        nativeView.setTranslationZ(Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.translationZ)));
        if (nativeView.getStateListAnimator() || data.forcePressAnimation) {
            this.overrideDefaultAnimator(nativeView, data);
        }
    }
    /**
     * @param {?} nativeView
     * @param {?} data
     * @return {?}
     */
    static overrideDefaultAnimator(nativeView, data) {
        /** @type {?} */
        const sla = new android.animation.StateListAnimator();
        /** @type {?} */
        const ObjectAnimator = android.animation.ObjectAnimator;
        /** @type {?} */
        const AnimatorSet = android.animation.AnimatorSet;
        /** @type {?} */
        const shortAnimTime = getAndroidR("integer", "config_shortAnimTime");
        /** @type {?} */
        const buttonDuration = nativeView.getContext().getResources().getInteger(shortAnimTime) / 2;
        /** @type {?} */
        const pressedElevation = this.androidDipToPx(nativeView, data.pressedElevation);
        /** @type {?} */
        const pressedZ = this.androidDipToPx(nativeView, data.pressedTranslationZ);
        /** @type {?} */
        const elevation = this.androidDipToPx(nativeView, data.elevation);
        /** @type {?} */
        const z = this.androidDipToPx(nativeView, data.translationZ || 0);
        /** @type {?} */
        const pressedSet = new AnimatorSet();
        /** @type {?} */
        const notPressedSet = new AnimatorSet();
        /** @type {?} */
        const defaultSet = new AnimatorSet();
        pressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [pressedZ])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [pressedElevation])
                .setDuration(0),
        ]));
        notPressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [z])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [elevation])
                .setDuration(0),
        ]));
        defaultSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [0]).setDuration(0),
            ObjectAnimator.ofFloat(nativeView, "elevation", [0]).setDuration(0),
        ]));
        sla.addState([getAndroidR("attr", "state_pressed"), getAndroidR("attr", "state_enabled")], pressedSet);
        sla.addState([getAndroidR("attr", "state_enabled")], notPressedSet);
        sla.addState([], defaultSet);
        nativeView.setStateListAnimator(sla);
    }
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    static applyOnIOS(tnsView, data) {
        /** @type {?} */
        const nativeView = tnsView.ios;
        /** @type {?} */
        const elevation = parseFloat(((/** @type {?} */ (data.elevation)) - 0).toFixed(2));
        nativeView.layer.maskToBounds = false;
        nativeView.layer.shadowColor = new Color(data.shadowColor).ios.CGColor;
        nativeView.layer.shadowOffset =
            data.shadowOffset ?
                CGSizeMake(0, parseFloat(String(data.shadowOffset))) :
                CGSizeMake(0, 0.54 * elevation - 0.14);
        nativeView.layer.shadowOpacity =
            data.shadowOpacity ?
                parseFloat(String(data.shadowOpacity)) :
                0.006 * elevation + 0.25;
        nativeView.layer.shadowRadius =
            data.shadowRadius ?
                parseFloat(String(data.shadowRadius)) :
                0.66 * elevation - 0.5;
        nativeView.layer.shouldRasterize = data.rasterize;
        nativeView.layer.rasterizationScale = screen.mainScreen.scale;
        /** @type {?} */
        let shadowPath = null;
        if (data.useShadowPath) {
            shadowPath = UIBezierPath.bezierPathWithRoundedRectCornerRadius(nativeView.bounds, nativeView.layer.shadowRadius).cgPath;
        }
        nativeView.layer.shadowPath = shadowPath;
    }
    /**
     * @param {?} nativeView
     * @param {?} dip
     * @return {?}
     */
    static androidDipToPx(nativeView, dip) {
        /** @type {?} */
        const metrics = nativeView.getContext().getResources().getDisplayMetrics();
        return android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, dip, metrics);
    }
}
Shadow.DEFAULT_SHAPE = ShapeEnum.RECTANGLE;
Shadow.DEFAULT_BGCOLOR = '#FFFFFF';
Shadow.DEFAULT_SHADOW_COLOR = '#000000';
Shadow.DEFAULT_PRESSED_ELEVATION = 2;
Shadow.DEFAULT_PRESSED_Z = 4;
if (false) {
    /** @type {?} */
    Shadow.DEFAULT_SHAPE;
    /** @type {?} */
    Shadow.DEFAULT_BGCOLOR;
    /** @type {?} */
    Shadow.DEFAULT_SHADOW_COLOR;
    /** @type {?} */
    Shadow.DEFAULT_PRESSED_ELEVATION;
    /** @type {?} */
    Shadow.DEFAULT_PRESSED_Z;
}

//# sourceMappingURL=data:application/json;base64,